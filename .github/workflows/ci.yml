name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x, 20.x ]

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
        - 27017:27017

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
        - 5672:5672
        - 15672:15672

      minio:
        image: minio/minio
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
        - 9000:9000
        - 9001:9001
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval=30s --health-timeout=20s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint

    - name: Check TypeScript compilation
      working-directory: ./backend
      run: npm run build

    - name: Run Prettier check
      working-directory: ./backend
      run: npm run format:check
    # Uncomment when tests are added
    # - name: Run tests
    #   working-directory: ./backend
    #   run: npm test
    #   env:
    #     NODE_ENV: test
    #     MONGODB_URI: mongodb://admin:password@localhost:27017/test_db?authSource=admin
    #     RABBITMQ_URL: amqp://guest:guest@localhost:5672
    #     MINIO_ENDPOINT: localhost
    #     MINIO_PORT: 9000
    #     MINIO_ACCESS_KEY: minioadmin
    #     MINIO_SECRET_KEY: minioadmin

  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x, 20.x ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run ESLint
      working-directory: ./client
      run: npm run lint

    - name: Check TypeScript compilation
      working-directory: ./client
      run: npm run type-check

    - name: Run Prettier check
      working-directory: ./client
      run: npm run format:check

    - name: Build frontend
      working-directory: ./client
      run: npm run build
    # Uncomment when tests are added
    # - name: Run tests
    #   working-directory: ./client
    #   run: npm test

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [ backend-ci, frontend-ci ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t backend-test .

    - name: Build frontend Docker image
      run: |
        cd client
        docker build -t frontend-test .

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Run npm audit for backend
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run npm audit for frontend
      working-directory: ./client
      run: npm audit --audit-level moderate

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Check for unused dependencies (backend)
      working-directory: ./backend
      run: npx depcheck --ignore-dirs=dist,build

    - name: Check for unused dependencies (frontend)
      working-directory: ./client
      run: npx depcheck --ignore-dirs=dist,build
