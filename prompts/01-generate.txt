build, run, and test the sytem!
i expect of a lot of new files, infra updates, runing, testing
it is a very big task, but keep it simple!
good luck

Your task is to create this project description in this existing project bilerplate (create the backend flows in the â€˜backendâ€™ folder,  the client application in the â€˜clientâ€™ folder, and add new folder for the image proccessing ai models  and services)


Code & Model Use:
â€¢	You are encouraged to reuse public models and open-source code as much as possible - Less code, well integrated, is better.
Design Prencipals 
â€¢	Clear and functional full-stack integration.
â€¢	Smart use of AI and existing tools.
â€¢	 Clean, understandable code and structure.
â€¢	Good documentation and reasoning.

ðŸ§  Home Task: "Spot the Helmet!"

Background
Youâ€™re building a simple internal web app for a construction company to verify whether workers
in site photos are wearing helmets. The company wants a lightweight, prototype-quality solution
that includes image upload, processing, visualization, and a simple API + frontend.

there is no need for users management. For no build the application like there will only be one user using it.

âœ… Objectives
1. Frontend (React)
â€¢	Upload page:
o	Drag-and-drop image upload, with some notification about successful upload.
â€¢	Result page:
o	Preview of the uploaded image.
o	Display of processed results: overlaid boxes to mark each detected persons with helmets (blue border box) and without (red border box)
o	A display of the metadata
â€¢	 Basic loading and error handling.

2. Backend (Node.js + Express)
â€¢	Accept image uploads via REST API.
â€¢	Accept â€˜get-all-imagesâ€™ request. return
o	Original image
o	Annotated image (with helmets shown) (if 
o	
â€¢	store images in minio
â€¢	store image metadata in mongodb
â€¢	publish event to trigger the processing microservice.
â€¢	Listen to published processing result events from the â€˜Image Analysisâ€™

3. Image Analysis - a python AI microservice (Python + OpenCV + AI) 
â€¢	Task:
o	Detect people, helmets, and if the helmet is warn properly.
â€¢	Key technologies:
o	OpenCV preprocessing (resizing, grayscale, etc.).
o	Pretrained models (e.g., YOLOv5/YOLOv8 or similar).
â€¢	Notes:
o	Try to use know and simple python image processing libraries.
o	End result after proccessing: the service is expected to save the new images to minio, and publish event with: image filename, list of bounding boxes, confidence scores, helmet status.

4. DevOps (Docker + Setup)
â€¢	Containerize the app using Docker.
â€¢	Use docker-compose to run:
o	Backend.
o	Python processor (Image Analysis).
â€¢	GitHub Actions for linting/tests/build
â€¢	Include setup steps (e.g. README.md instructions).
â€¢	Explanations of design choices (DESIGN.md file)
