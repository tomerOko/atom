---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Frontend Web Application

## Tech Stack

- React 19
- TypeScript
- Styled Components
- React Router DOM
- Zustand for state management

## Project Structure

```
src/
├── components/           # Reusable UI components
├── pages/               # Page-level components
├── routes/              # Route definitions
├── shared/              # Shared utilities and logic
│   ├── components/      # Shared/global components
│   │   └── generic/     # Generic reusable components (Button, Input, etc.)
│   ├── hooks/           # Custom React hooks
│   ├── services/        # API and service functions
│   ├── store/           # Zustand stores
│   ├── types/           # Global TypeScript types
│   ├── utils/           # Utility functions
│   └── consts/          # Constants and configuration
└── app.tsx              # Main app component
```

## File and Folder Naming Rules

- **Always use kebab-case** for files and folders
- Examples: `login-form.tsx`, `auth-service.ts`, `user-profile/`
- No camelCase, PascalCase, or snake_case for file/folder names

## Generic Components Priority

1. **Always use generic components** from `src/shared/components/generic/` instead of regular HTML elements when possible
2. **Create new generic components** if the existing ones don't meet your needs
3. **Generic components include**: Button, Input, Modal, Card, Loading, etc.
4. **Never use raw HTML elements** like `<button>`, `<input>`, `<div>` for UI elements when a generic component exists or can be created

Examples:
```tsx
// ✅ Correct - Use generic components
import { Button } from '../../shared/components/generic/button/button';
import { Input } from '../../shared/components/generic/input/input';

// ❌ Wrong - Don't use raw HTML
<button onClick={handleClick}>Click me</button>
<input type="text" value={value} onChange={onChange} />
```

## Component Structure Rules

### Component Files

Each component must have its own folder with exactly these files:

```
component-name/
├── component-name.tsx        # Main component file with styled-components
└── types.ts                  # Component interfaces and types
```

### Component Code Rules

1. **No default exports** - Always use named exports

   ```tsx
   // ✅ Correct
   export const LoginForm: React.FC<LoginFormProps> = ({ prop1, prop2 }) => {

   // ❌ Wrong
   export default LoginForm;
   ```

2. **Styled Components** - Always use styled-components, never CSS files

   ```tsx
   import styled from 'styled-components';
   
   const FormContainer = styled.div`
     max-width: 400px;
     padding: 2rem;
     border-radius: 8px;
   `;

   const FormField = styled.div`
     margin-bottom: 1rem;
   `;

   const ErrorMessage = styled.span`
     color: red;
     font-size: 0.875rem;
   `;
   ```

3. **Types File** - Every component must have a separate types.ts file

   ```tsx
   // types.ts
   export interface ComponentNameProps {
     onSubmit: (data: FormData) => void;
   }

   export interface ComponentNameData {
     email: string;
     password: string;
   }
   ```

4. **React Functional Components** with TypeScript and Styled Components

   ```tsx
   import React, { useState } from 'react';
   import styled from 'styled-components';
   import { Button } from '../../shared/components/generic/button/button';
   import { Input } from '../../shared/components/generic/input/input';
   import { ComponentProps } from './types';

   const Container = styled.div`
     max-width: 400px;
     margin: 0 auto;
   `;

   export const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
     return (
       <Container>
         <Input placeholder="Enter text" />
         <Button onClick={handleClick}>Submit</Button>
       </Container>
     );
   };
   ```

## Import Order

1. React imports
2. Third-party libraries (including styled-components)
3. Generic components from shared/components/generic
4. Internal shared imports (services, hooks, etc.)
5. Local component imports (types)

```tsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { Button } from '../../shared/components/generic/button/button';
import { Input } from '../../shared/components/generic/input/input';
import { loginUser } from '../../shared/services/auth.service';
import { LoginFormProps } from './types';
```

## State Management

- Use **Zustand** for global state
- Use **React useState** for local component state
- Keep state management simple and avoid complex patterns

## Service Layer

- Place all API calls in `src/shared/services/`
- Use kebab-case naming: `auth.service.ts`, `user.service.ts`
- Export functions (not classes)

## Styling Rules

- **Always use styled-components** - never CSS files
- **No CSS modules, no plain CSS files**
- Use kebab-case for styled component names in variables
- Keep styled components close to where they're used

```tsx
// ✅ Correct
import styled from 'styled-components';

const FormContainer = styled.div`
  max-width: 400px;
  padding: 1rem;
`;

const SubmitButton = styled(Button)`
  margin-top: 1rem;
  background-color: #007bff;
`;

// ❌ Wrong - No CSS files
import styles from './component-name.module.css';
import './component-name.css';
```

## Generic Components Guidelines

### When to Create New Generic Components

1. **Reusability**: If you need the same UI element in multiple places
2. **Consistency**: To ensure consistent styling across the app
3. **Common patterns**: Form elements, buttons, modals, cards, etc.

### Generic Component Structure

```
src/shared/components/generic/
├── button/
│   ├── button.tsx
│   └── types.ts
├── input/
│   ├── input.tsx
│   └── types.ts
├── modal/
│   ├── modal.tsx
│   └── types.ts
└── card/
    ├── card.tsx
    └── types.ts
```

### Generic Component Example

```tsx
// src/shared/components/generic/button/button.tsx
import React from 'react';
import styled from 'styled-components';
import { ButtonProps } from './types';

const StyledButton = styled.button<ButtonProps>`
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  background-color: ${props => props.variant === 'primary' ? '#007bff' : '#6c757d'};
  color: white;
  cursor: pointer;
  
  &:hover {
    opacity: 0.9;
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

export const Button: React.FC<ButtonProps> = ({ children, ...props }) => {
  return <StyledButton {...props}>{children}</StyledButton>;
};
```

## TypeScript Rules

- Use strict TypeScript configuration
- Define interfaces for all props and data structures
- Use React.FC for functional components
- Place types in separate files when they're component-specific

## Routing

- Use React Router DOM
- Place route definitions in `src/routes/`
- Page components go in `src/pages/`

## Development Commands

```json
{
  "start": "react-scripts start",
  "build": "react-scripts build"
}
```

## Key Principles

1. **Generic components first** - Always use or create generic components instead of raw HTML
2. **Styled-components only** - Never use CSS files
3. **Keep it simple** - No over-engineering or buzz words
4. **Consistency** - Follow the same patterns throughout
5. **Separation of concerns** - Components and types in separate files
6. **Kebab-case everywhere** - Files, folders
7. **No default exports** - Always use named exports

## File Extensions

- `.tsx` for React components
- `.ts` for TypeScript files
- **No CSS files** - Use styled-components only

## Folder Organization

- Group related functionality together
- Use the shared folder for reusable code
- Keep page-specific components in their respective page folders
- Components that are used across multiple pages go in `src/components/`
- **All generic/reusable UI components go in `src/shared/components/generic/`**

## Error Handling

- Use try-catch blocks for async operations
- Display user-friendly error messages
- Keep error states in component state

## Form Handling

- Use controlled components with useState
- Validate input on form submission
- Provide loading states during async operations
- Clear form errors when user starts typing again
- **Always use generic Input, Button, and Form components**

## Styled Components Best Practices

1. **Component-scoped styling**: Keep styled components in the same file as the component
2. **Props-based styling**: Use props to control styling variations
3. **Theme support**: Prepare for theme provider integration
4. **Performance**: Use template literals for dynamic styles

```tsx
// Good example
const Container = styled.div<{ isActive: boolean }>`
  padding: 1rem;
  background-color: ${props => props.isActive ? '#e3f2fd' : '#f5f5f5'};
  border: 1px solid ${props => props.isActive ? '#2196f3' : '#ddd'};
`;
```
